clear
close all hidden

run ..\setup.m

import casadi.*

a = MX.sym('a', 1);
b = MX.sym('b', 1);

[theta1, theta2] = spherical_link_eq(a, b);


link_fun = Function('link_fun', {a, b}, {[theta1; theta2]});

% jac_link_fun = jacobian(link_fun(a, b), [theta1, theta2]);
jac_link = jacobian(link_fun(a, b), [a;b]);

jac_link_fun = Function('jac_link_fun', {[a; b]}, {jac_link});

jac = full(jac_link_fun([.1;0]))' * [1;1];

model = make_tail_model(.55, .4);

pos = @(t) [mod(floor(t*4), 2) * pi/8; -mod(floor(t*4), 2) * pi/8];

[T, Y]  = ode45(@(t,state) tail_dynamics(jac_link_fun, state, pos(t), model), [0, 5], [0;0;0;0]);

%%
angles = Y(:, 1:2);
vel = Y(:, 3:4);
figure
hold on
colororder(["#0072BD", "#D95319"])
plot(T, angles, '-')
plot(T, vel, '--')
legend('alpha', 'beta', 'dalpha', 'dbeta')

figure
[THETA1, THETA2] = spherical_link_eq(angles(:, 1), angles(:, 2));
plot(T, [THETA1, THETA2])

figure
MOTOR_TORQUES = zeros([2, length(T)]);
POS
for i = 1:length(T)
    MOTOR_TORQUES(:, i) = recover_motor_torques(jac_link_fun, Y(i,:)', pos(T(i)));
end
plot(T, MOTOR_TORQUES')


showmotion(model, T, angles')

function dxdt =  tail_dynamics(jac_fun, state, pos, model)

g = -9.8;

alpha = state(1);
beta = state(2);
dalph = state(3);
dbeta = state(4);

% A = [zeros(2), eye(2); zeros(2), zeros(2)];
% M = model.M;
% L = model.L;
% I = 1/3 * M * L^2;
jac = full(jac_fun([alpha;beta]));
% tau = jac * motor_torques;
% tau = 0;
tau = [-(alpha - pos(1)) * 5 - dalph * 1;-(beta - pos(2)) * 100 - dbeta * 10];

motor_torques = jac^-1 * tau;
motor_torques = max(-[.65 * 9; .65 * 9],min([.65 * 9; .65 * 9], motor_torques));
tau = jac * motor_torques;

% if max(isnan(tau))
%     error('tau is NaN')
% end
qdd =FDcrb(model, [alpha;beta], [dalph; dbeta], tau);
dxdt = [dalph; dbeta; qdd];
end

function motor_torques = recover_motor_torques(jac_fun, state, pos)
g = -9.8;

alpha = state(1);
beta = state(2);
dalph = state(3);
dbeta = state(4);

% A = [zeros(2), eye(2); zeros(2), zeros(2)];
% M = model.M;
% L = model.L;
% I = 1/3 * M * L^2;
jac = full(jac_fun([alpha;beta]));
% tau = jac * motor_torques;
% tau = 0;
tau = [-(alpha - pos(1)) * 5 - dalph * 1;-(beta - pos(2)) * 100 - dbeta * 10];

motor_torques = jac^-1 * tau;
motor_torques = max(-[.65 * 9; .65 * 9],min([.65 * 9; .65 * 9], motor_torques));

end